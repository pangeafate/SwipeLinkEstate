import React, { useState, useCallback, useMemo, useEffect } from 'react'
import { Property, BucketType } from './types'

interface Agent {
  id: string
  name: string
  phone: string
  email: string
  avatar?: string
  company?: string
  license?: string
}

interface Collection {
  id: string
  title: string
  description: string
  agentId: string
  createdAt: string
  updatedAt: string
}

interface SessionProgress {
  propertiesViewed: number
  totalProperties: number
  timeSpent: number
  startedAt: string
}

interface CollectionStatistics {
  averagePrice: number
  priceRange: { min: number; max: number }
  averageArea: number
  bedroomRange: { min: number; max: number }
  bathroomRange: { min: number; max: number }
  propertyTypes: Record<string, number>
}

interface CollectionOverviewProps {
  collection?: Collection
  agent: Agent
  properties: Property[]
  buckets: Record<BucketType, string[]>
  sessionProgress: SessionProgress
  onPropertySelect: (property: Property) => void
  onBucketChange: (bucket: BucketType, propertyId: string) => void
  onContactAgent: (agent: Agent) => void
  onHelpToggle: () => void
  loading?: boolean
  showHelp?: boolean
  error?: string
}

const CollectionOverview: React.FC<CollectionOverviewProps> = ({
  collection,
  agent,
  properties,
  buckets,
  sessionProgress,
  onPropertySelect,
  onBucketChange,
  onContactAgent,
  onHelpToggle,
  loading = false,
  showHelp = false,
  error
}) => {
  // State management
  const [currentPreviewIndex, setCurrentPreviewIndex] = useState(0)
  const [preloadedCount, setPreloadedCount] = useState(0)
  const [expandedSummary, setExpandedSummary] = useState(false)
  const [activeHelpHotspot, setActiveHelpHotspot] = useState<string | null>(null)

  // Responsive design state
  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1200)
  
  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth)
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', handleResize)
      return () => window.removeEventListener('resize', handleResize)
    }
  }, [])

  // Layout breakpoints
  const isMobile = windowWidth < 768
  const isTablet = windowWidth >= 768 && windowWidth < 1024

  // Progressive loading simulation
  useEffect(() => {
    if (!loading && properties.length > 5) {
      const timer = setTimeout(() => {
        setPreloadedCount(Math.min(10, properties.length - 5))
      }, 1000)
      return () => clearTimeout(timer)
    }
  }, [loading, properties.length])

  // Collection statistics calculation
  const statistics = useMemo((): CollectionStatistics => {
    if (!properties.length) {
      return {
        averagePrice: 0,
        priceRange: { min: 0, max: 0 },
        averageArea: 0,
        bedroomRange: { min: 0, max: 0 },
        bathroomRange: { min: 0, max: 0 },
        propertyTypes: {}
      }
    }

    const validProperties = properties.filter(p => p.price && p.area_sqft && p.bedrooms && p.bathrooms)
    
    const averagePrice = validProperties.reduce((sum, p) => sum + (p.price || 0), 0) / validProperties.length
    const prices = validProperties.map(p => p.price || 0).sort((a, b) => a - b)
    const areas = validProperties.map(p => p.area_sqft || 0)
    const bedrooms = validProperties.map(p => p.bedrooms || 0)
    const bathrooms = validProperties.map(p => p.bathrooms || 0)
    
    const propertyTypes = properties.reduce((acc, p) => {
      if (p.property_type) {
        acc[p.property_type] = (acc[p.property_type] || 0) + 1
      }
      return acc
    }, {} as Record<string, number>)

    return {
      averagePrice,
      priceRange: { min: prices[0] || 0, max: prices[prices.length - 1] || 0 },
      averageArea: areas.reduce((sum, area) => sum + area, 0) / areas.length,
      bedroomRange: { min: Math.min(...bedrooms), max: Math.max(...bedrooms) },
      bathroomRange: { min: Math.min(...bathrooms), max: Math.max(...bathrooms) },
      propertyTypes
    }
  }, [properties])

  // Get visible preview properties
  const previewProperties = useMemo(() => {
    const visibleCount = isMobile ? 1 : isTablet ? 2 : 3
    if (properties.length > 100) {
      // Virtualization for large collections
      return properties.slice(currentPreviewIndex, currentPreviewIndex + 4)
    }
    return properties.slice(0, Math.min(visibleCount + 1, properties.length))
  }, [properties, currentPreviewIndex, isMobile, isTablet])

  // Navigation handlers
  const handlePreviewNext = useCallback(() => {
    if (currentPreviewIndex < properties.length - 3) {
      setCurrentPreviewIndex(prev => prev + 1)
      
      // Add shifted class for visual feedback
      const preview = document.querySelector('[data-testid="carousel-preview"]')
      if (preview) {
        preview.classList.add('shifted')
      }
    }
  }, [currentPreviewIndex, properties.length])

  const handlePreviewPrev = useCallback(() => {
    if (currentPreviewIndex > 0) {
      setCurrentPreviewIndex(prev => prev - 1)
    }
  }, [currentPreviewIndex])

  // Property selection handler
  const handlePropertySelect = useCallback((property: Property) => {
    onPropertySelect(property)
    
    // Update live region for screen readers
    const liveRegion = document.querySelector('[data-testid="overview-live-region"]')
    if (liveRegion) {
      liveRegion.textContent = `Selected property: ${property.address}, $${property.price?.toLocaleString()}`
    }
  }, [onPropertySelect])

  // Help system handlers
  const handleHelpHotspotClick = useCallback((hotspot: string) => {
    setActiveHelpHotspot(activeHelpHotspot === hotspot ? null : hotspot)
  }, [activeHelpHotspot])

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && showHelp) {
        onHelpToggle()
      }
    }

    if (showHelp) {
      document.addEventListener('keydown', handleKeyDown)
      return () => document.removeEventListener('keydown', handleKeyDown)
    }
  }, [showHelp, onHelpToggle])

  // Error state
  if (error) {
    return (
      <div 
        data-testid="collection-overview" 
        className="collection-overview error-state"
        role="main"
        aria-label="Property collection overview"
      >
        <div data-testid="collection-error" className="error-container">
          <h2>Something went wrong</h2>
          <p>Failed to load collection data</p>
          <button data-testid="retry-load-btn" className="btn primary">
            Try Again
          </button>
        </div>
      </div>
    )
  }

  // Loading state
  if (loading) {
    return (
      <div 
        data-testid="collection-loading-skeleton" 
        className="collection-skeleton animated-skeleton"
      >
        <div data-testid="header-skeleton" className="skeleton-header">
          <div className="skeleton-avatar" />
          <div className="skeleton-text-block">
            <div className="skeleton-line long" />
            <div className="skeleton-line medium" />
          </div>
        </div>
        
        <div data-testid="summary-skeleton" className="skeleton-summary">
          <div className="skeleton-stats">
            {Array.from({ length: 4 }, (_, i) => (
              <div key={i} className="skeleton-stat">
                <div className="skeleton-line short" />
                <div className="skeleton-line medium" />
              </div>
            ))}
          </div>
        </div>

        <div data-testid="carousel-skeleton" className="skeleton-carousel">
          {Array.from({ length: 3 }, (_, i) => (
            <div key={i} className="skeleton-card">
              <div className="skeleton-image" />
              <div className="skeleton-content">
                <div className="skeleton-line medium" />
                <div className="skeleton-line short" />
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  // Empty collection state
  if (!properties.length) {
    return (
      <div 
        data-testid="collection-overview"
        className="collection-overview empty-state"
        role="main"
        aria-label="Property collection overview"
      >
        <div data-testid="empty-collection-state" className="empty-container">
          <h2>No properties in this collection</h2>
          <p>This collection is currently empty. Check back later for updates.</p>
        </div>
      </div>
    )
  }

  // Missing collection fallback
  if (!collection) {
    return (
      <div 
        data-testid="collection-overview"
        className="collection-overview error-state"
        role="main"
        aria-label="Property collection overview"
      >
        <div className="error-container">
          <h2>Collection unavailable</h2>
          <p>Unable to load collection information.</p>
        </div>
      </div>
    )
  }

  const layoutClass = isMobile ? 'mobile-layout' : isTablet ? 'tablet-layout' : 'desktop-layout'

  return (
    <div 
      data-testid="collection-overview"
      className={`collection-overview ${layoutClass} high-contrast-support`}
      role="main"
      aria-label="Property collection overview"
    >
      {/* Header Section */}
      <header data-testid="collection-header" className="collection-header" role="banner">
        {/* Agent Branding */}
        <div data-testid="agent-branding" className="agent-branding">
          <img 
            src={agent?.avatar || '/api/placeholder/48/48'} 
            alt={agent?.name || 'Agent'}
            className="agent-avatar"
            loading="eager"
          />
          <div className="agent-info">
            <h1>{agent?.name || 'Agent'}</h1>
            {agent?.company && <p className="company">{agent.company}</p>}
            {agent?.phone && <p className="contact">{agent.phone}</p>}
            {agent?.email && <p className="email">{agent.email}</p>}
            {agent?.license && <p className="license">License: {agent.license}</p>}
          </div>
        </div>

        {/* Collection Title & Description */}
        <div data-testid="collection-title" className="collection-title">
          <h2>{collection.title}</h2>
          <p className="description">{collection.description}</p>
        </div>

        {/* Property Count & Value Range Summary */}
        <div className="header-stats">
          <div data-testid="property-count-summary" className="stat">
            <span className="stat-text">{properties.length} Properties</span>
          </div>
          
          <div data-testid="value-range-summary" className="stat">
            <span className="stat-text">
              ${statistics.priceRange.min.toLocaleString()} - ${statistics.priceRange.max.toLocaleString()}
            </span>
          </div>
        </div>

        {/* Progress Indicator */}
        <div data-testid="progress-indicator" className="progress-section">
          <div className="progress-text">
            {sessionProgress?.propertiesViewed || 0} of {sessionProgress?.totalProperties || properties.length} viewed
          </div>
          <div 
            className="progress-bar"
            role="progressbar"
            aria-valuenow={sessionProgress?.propertiesViewed || 0}
            aria-valuemin="0"
            aria-valuemax={sessionProgress?.totalProperties || properties.length}
          >
            <div 
              className="progress-fill"
              style={{ 
                width: `${((sessionProgress?.propertiesViewed || 0) / (sessionProgress?.totalProperties || properties.length)) * 100}%` 
              }}
            />
          </div>
        </div>
      </header>

      {/* Collection Summary Card */}
      <section 
        data-testid="collection-summary-card" 
        className={`summary-card ${isMobile && !expandedSummary ? 'collapsed' : ''}`}
      >
        {isMobile && (
          <div data-testid="collapsible-summary" className="collapsible-header">
            <button
              data-testid="expand-summary-btn"
              onClick={() => setExpandedSummary(!expandedSummary)}
              className="expand-btn"
            >
              {expandedSummary ? '▼' : '▶'} Collection Summary
            </button>
          </div>
        )}

        <div className={`summary-content ${isMobile && !expandedSummary ? 'hidden' : ''}`}>
          {/* Key Statistics */}
          <div data-testid="key-statistics" className="statistics-grid">
            <div className="stat-item">
              <span className="stat-label">Average Price</span>
              <span className="stat-value">${Math.round(statistics.averagePrice).toLocaleString()}</span>
            </div>
            
            <div data-testid="area-stats" className="stat-item">
              <span className="stat-label">Average Area</span>
              <span className="stat-value">{Math.round(statistics.averageArea).toLocaleString()} sq ft avg</span>
            </div>
            
            <div data-testid="bedrooms-distribution" className="stat-item">
              <span className="stat-label">Bedrooms</span>
              <span className="stat-value">
                {statistics.bedroomRange.min === statistics.bedroomRange.max 
                  ? `${statistics.bedroomRange.min}` 
                  : `${statistics.bedroomRange.min}-${statistics.bedroomRange.max}`} bedrooms
              </span>
            </div>
            
            <div className="stat-item">
              <span className="stat-label">Bathrooms</span>
              <span className="stat-value">
                {statistics.bathroomRange.min === statistics.bathroomRange.max 
                  ? `${statistics.bathroomRange.min}` 
                  : `${statistics.bathroomRange.min}-${statistics.bathroomRange.max}`} bathrooms
              </span>
            </div>
          </div>

          {/* Visual Property Type Distribution */}
          <div data-testid="property-type-distribution" className="property-types">
            <h4>Property Types</h4>
            <div className="type-tags">
              {Object.entries(statistics.propertyTypes).map(([type, count]) => (
                <span key={type} className="type-tag">
                  {type} ({count})
                </span>
              ))}
            </div>
          </div>

          {/* Price Range Visualization */}
          <div data-testid="price-range-visualization" className="price-visualization">
            <h4>Price Distribution</h4>
            <div data-testid="price-range-chart" className="price-chart">
              {/* Simplified price range chart */}
              <div className="chart-bar">
                <div className="price-segment" style={{ width: '100%' }}>
                  ${statistics.priceRange.min.toLocaleString()} - ${statistics.priceRange.max.toLocaleString()}
                </div>
              </div>
            </div>
          </div>

          {/* Location Map Overview */}
          <div data-testid="location-map-overview" className="location-overview">
            <h4>Locations Overview</h4>
            <div className="location-summary">
              <p>Properties located across prime Miami Beach areas</p>
              {/* Placeholder for actual map integration */}
              <div className="map-placeholder">
                📍 Interactive map coming soon
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Carousel Preview */}
      <section 
        data-testid="carousel-preview" 
        className={`carousel-preview ${isMobile ? 'mobile-preview' : ''} ${currentPreviewIndex > 0 ? 'shifted' : ''}`}
        data-swipeable="true"
      >
        <h3>Featured Properties</h3>
        
        {/* Navigation Arrows */}
        <button
          data-testid="carousel-preview-prev"
          className="preview-nav prev"
          onClick={handlePreviewPrev}
          disabled={currentPreviewIndex === 0}
          aria-label="Previous properties"
        >
          ◀
        </button>
        
        <button
          data-testid="carousel-preview-next"
          className="preview-nav next"
          onClick={handlePreviewNext}
          disabled={currentPreviewIndex >= properties.length - 3}
          aria-label="Next properties"
        >
          ▶
        </button>

        {/* Property Cards */}
        <div className="preview-cards touch-enabled" data-swipeable="true">
          {properties.length > 100 && (
            <div data-testid="virtualized-preview" className="virtualized-container">
              {/* Virtualization indicator */}
            </div>
          )}
          
          {previewProperties.map((property, index) => (
            <div
              key={property.id}
              data-testid={`preview-property-card-${property.id}`}
              className="preview-card"
              onClick={() => handlePropertySelect(property)}
              role="button"
              tabIndex={0}
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault()
                  handlePropertySelect(property)
                }
              }}
            >
              <img
                data-testid={`property-hero-image-${property.id}`}
                src={property.images[0]}
                alt={property.address}
                className="preview-image"
                loading={index < 2 ? "eager" : "lazy"}
                srcSet={`${property.images[0]}.webp 1x, ${property.images[0]}@2x.webp 2x`}
              />
              
              {property.images.length > 1 && (
                <img
                  data-testid={`property-thumbnail-${property.id}`}
                  src={property.images[1]}
                  alt={`${property.address} thumbnail`}
                  className="preview-thumbnail"
                  loading="lazy"
                />
              )}
              
              <div className="preview-info">
                <h4>{property.address}</h4>
                <p className="price">${property.price?.toLocaleString()}</p>
                <p className="features">
                  {property.bedrooms} bed • {property.bathrooms} bath • {property.area_sqft?.toLocaleString()} sqft
                </p>
              </div>
            </div>
          ))}
        </div>

        {/* Preview Indicators */}
        <div data-testid="carousel-preview-indicators" className="preview-indicators">
          {Array.from({ length: Math.min(properties.length, 3) }, (_, index) => (
            <button
              key={index}
              data-testid={`carousel-indicator-${index}`}
              className={`indicator ${index === currentPreviewIndex ? 'active' : ''}`}
              onClick={() => setCurrentPreviewIndex(index)}
              aria-label={`Go to property ${index + 1}`}
            />
          ))}
        </div>

        {/* Progressive Loading Status */}
        {properties.length > 5 && (
          <div className="loading-status">
            <div data-testid="progressive-loading-indicator">
              Loading additional properties...
            </div>
            <div 
              data-testid="preload-status" 
              data-preloaded={preloadedCount}
              className="preload-info"
            >
              {preloadedCount > 0 && `${preloadedCount} properties preloaded`}
            </div>
          </div>
        )}

        {/* Lazy Load Trigger */}
        <div data-testid="lazy-load-trigger" className="lazy-trigger" />
      </section>

      {/* Action Bar */}
      <div data-testid="action-bar" className="action-bar" role="toolbar">
        {/* Bucket Quick Access */}
        <div data-testid="bucket-quick-access" className="bucket-summary">
          <span className="bucket-count">❤️ Liked: {buckets?.love?.length || 0}</span>
          <span className="bucket-count">🔖 Considering: {buckets?.maybe?.length || 0}</span>
          <span className="bucket-count">❌ Disliked: {buckets?.pass?.length || 0}</span>
        </div>

        {/* Session Progress Tracker */}
        <div data-testid="session-progress-tracker" className="session-info">
          {sessionProgress?.startedAt && <span>Started {new Date(sessionProgress.startedAt).toLocaleTimeString()}</span>}
        </div>

        {/* Action Buttons */}
        <div className="action-buttons">
          <button
            data-testid="help-toggle-btn"
            className="action-btn"
            onClick={onHelpToggle}
            aria-pressed={showHelp}
          >
            💡 Help
          </button>

          <button
            data-testid="contact-agent-btn"
            className="action-btn primary"
            onClick={() => onContactAgent(agent)}
          >
            📞 Contact Agent
          </button>
        </div>
      </div>

      {/* Help Overlay */}
      {showHelp && (
        <div 
          data-testid="help-overlay" 
          className="help-overlay"
          role="dialog"
          aria-labelledby="help-title"
          aria-modal="true"
        >
          <div data-testid="help-instructions" className="help-content">
            <h3 id="help-title">How to Use This Collection</h3>
            
            <div className="help-steps">
              <div className="help-step">
                <h4>1. Browse Properties</h4>
                <p>Navigate through properties using the carousel or click individual cards</p>
              </div>
              
              <div className="help-step">
                <h4>2. Like Properties</h4>
                <p>Use the heart button to save properties you love</p>
              </div>
              
              <div className="help-step">
                <h4>3. Book Visits</h4>
                <p>Schedule property visits directly from the liked properties</p>
              </div>
            </div>

            {/* Interactive Hotspots */}
            <div className="help-hotspots">
              <button
                data-testid="help-hotspot-carousel"
                className="help-hotspot"
                onClick={() => handleHelpHotspotClick('carousel')}
                style={{ top: '40%', left: '50%' }}
              >
                ?
              </button>
              
              {activeHelpHotspot === 'carousel' && (
                <div 
                  data-testid="help-tooltip-carousel" 
                  className="help-tooltip"
                  style={{ top: '45%', left: '50%' }}
                >
                  <p>Swipe or use arrows to navigate properties</p>
                </div>
              )}
            </div>

            <button
              className="close-help-btn"
              onClick={onHelpToggle}
              aria-label="Close help"
            >
              ✕
            </button>
          </div>
        </div>
      )}

      {/* Screen Reader Live Region */}
      <div 
        data-testid="overview-live-region"
        className="sr-only"
        aria-live="polite"
        aria-atomic="true"
      />
    </div>
  )
}

export default CollectionOverview